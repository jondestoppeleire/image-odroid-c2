# this is a sh file, not bash

# turn off power savings, set the background to black
/usr/bin/xset -dpms
/usr/bin/xset s off

# The comment above says to set the background to black, but the line below,
# before the most recent change, said '... -solid white'.  Not sure if there
# was some inverse color issue when displaying on a cubby or other device.
/usr/bin/xsetroot -solid black

# hide the pointer afte 1sec
/usr/bin/unclutter -idle 1 -root &

# This code and also the code that writes /tmp/address.html should live closer
# to a network up/down part of the code, regardless of X11 starting up.
# The file is called netboot-if.conf, but it is used regardless of netboot-ing.
if [ -r /etc/netboot-if.conf ]; then
    # shellcheck disable=SC1091
    . /etc/netboot-if.conf
    number=$(echo "$IPV4ADDR" | cut -d. -f4)
    eth_mac_full=$(cat "/sys/class/net/$DEVICE/address")
    eth_mac=$(echo "$eth_mac_full" | sed 's/://g')
fi

# This script runs as the eatsa user, so sudo is necessary to mount.
if sudo mount -r -L EATSACONF /mnt; then
    # shellcheck disable=SC1091
    [ -r /mnt/config.txt ] && . /mnt/config.txt
    sudo umount /mnt
fi

if [ -n "$WISE_URL" ]; then
    # do nothing, use WISE_URL
    true
elif [ -n "$WISE_ROLE" ] && [ -n "$WISE_ID" ]; then
    # we have a config.txt, use it
    # the host storemanager is configured in /etc/hosts, no need to calculate it
    WISE_URL="http://storemanager:3000/$WISE_ROLE/$WISE_ID"
elif ! nc -w1 -z storemanager 3000 || [ "$number" -lt 201 ] || [ "$number" -gt 230 ]; then
    if [ -z "$number" ]; then
        # we have no network connection
        cubby="$eth_mac_full"
    else
        # we have an IP address but it's not a cubby address
        cubby="$IPV4ADDR $eth_mac_full"
    fi

    if [ -z "$cubby" ]; then
        cubby="Could not find MAC address nor IP address"
    fi
    sed -e "s,%%TEXT%%,$cubby," /etc/X11/address.html > /tmp/address.html
    WISE_URL="file:///tmp/address.html"
elif [ "$number" -gt 200 ] && [ "$number" -lt 231 ]; then
    # we have a proper IP address
    if [ -r /wise_role.txt ]; then
        # shellcheck disable=SC1091
        # This should set WISE_ROLE
        . /wise_role.txt
    fi
    if [ -n "$WISE_ROLE" ]; then
        WISE_URL="http://storemanager:3000/$WISE_ROLE/$((number-200))"
    else
        WISE_URL=http://storemanager:3000/cubby/$((number-200))
    fi
else
    # unknown state
    [ -z "$eth_mac" ] && eth_mac=unknown
    WISE_URL="http://storemanager:3000/mac/$eth_mac"
fi

# force the output framerate to 30fps, but fail gracefully if not supported
/usr/bin/xrandr --refresh 30 || true

# set rotation / mirroring params based on display connection
output=$(/usr/bin/xrandr | grep " connected " | cut -d' ' -f1)
if [ -n "$WISE_ROTATE" ]; then
    /usr/bin/xrandr --output "$output" --rotate "$WISE_ROTATE"
else
    case "$output" in
        DP1|DisplayPort-0) /usr/bin/xrandr --output "$output" --rotate left ;; # brand/menu/status
        HDMI1|HDMI-0) /usr/bin/xrandr --output "$output" --rotate inverted ;; # cubby
    esac
fi

# run a minimal windows manager to facilitate full-screen
/usr/bin/openbox-session &

# allow full-scree exit if WISE_OPTS is set
if [ -n "$DEBUG" ]; then
    WISE_OPTS=1
fi

if [ -n "$WISE_OPTS" ]; then
    chromium_mode="--start-fullscreen"
else
    chromium_mode="--kiosk"
fi

# allow timezone override for chromium only
if [ -n "$WISE_TZ" ]; then
    export TZ=$WISE_TZ
fi

# removed if-statments for other platforms as this is specific for odroid-c2 smartshelf.
#cache_dir=/home/eatsa/chromium
#chromium_opts="--incognito --allow-running-insecure-content --no-first-run --autoplay-policy=no-user-gesture-required --user-data-dir=$cache_dir"

# the following flags should be tried individually - they usually crash chromium in incognito mode.
# --disable-accelerated-2d-canvas is ok, not sure about the rest.
#chromium_platform="--use-gl=egl --ignore-gpu-blacklist --disable-accelerated-2d-canvas --enable-gpu-rasterization --enable-gpu-memory-buffer-video-frames --enable-zero-copy-dxgi-video --video-threads=4"

# this loop also prevents any further xsession scripts from running
# NOTE: some odd reason, chromium does not like multi-line options and this script doesn't expand args correctly!
while true; do
    rm -rf ~/.config/chromium
    /usr/bin/chromium-browser \
      --incognito --allow-running-insecure-content --no-first-run --autoplay-policy=no-user-gesture-required --video-threads=4 \
      "${chromium_mode}" \
      "$WISE_URL"
done
