#!/bin/bash

. ${BF_DIR:-$HOME}/build-framework/common
target=$(target_create $1)
tmpdir=$(target_create $TMPDIR)

log_info "target: $target"
log_info "tmpdir: $tmpdir"

[[ -z $EATSAPASS ]] && exit_error "must set EATSAPASS"

# standard "don't ask questions" options for apt-get
export DEBIAN_FRONTEND=noninteractive
apt_get="apt-get -o Dpkg::Options::=--force-confdef -yq --no-install-suggests --no-install-recommends --force-yes"

display_config=$TOPDIR/display-config

# execute a command in the chroot
chr() {
    sudo chroot $fs_root "$@"
}

# write out a file in the chroot (equiv of cat > file)
cht() {
    sudo chroot $fs_root tee $2 $1 > /dev/null
}

#####
# stage1:
#   1. get and extract artifacts into fs_root, created from ../utils/mk_filesystem_artifacts.sh
#   2. Install a bunch of additional packages
#   3. Add a bunch of configuration files
#   4. (unused ???) create the debarchive file if there isn't one already from step 1?
#
# Globals:
#   ARTIFACT_DIR - the directory to find artifacts, typically ./artifacts
#   BOOT_VERSION - an array of rootfs filesystem artifacts for each platform
#   EATSAPASS    - the password for the eatsa user
#   PKG_VERSION  - the built package version
# Arguments
#   platform     - one of nuc_5ix, odroid_xu4, odroid_c2
#   target       - the build directory, defaults to "/tmp/$PACKAGE-$GIT_HASH"
#   fs_version   - the filesystem and debarchive artifact versions
# Returns:
#   None         - but it should return a code so we can check success or failure
#####
do_stage1() {
    chr systemctl enable supervisor
    chr systemctl enable acpid

    # configure scripts for network initiialization
    log_info "configure networking"
    sudo cp $display_config/scripts/wise-ifpreup-hostname $fs_root/etc/network/if-up.d/
    sudo cp $display_config/scripts/wise-ifup-hostname $fs_root/etc/network/if-up.d/

    # misc setup
    log_info "x11 config"
    # 2018-09-24 bfung: Don't think we need Xwrapper.config
    sudo cp $display_config/x11/Xwrapper.config $fs_root/etc/X11/

    log_info "rsyslog config"
    sudo cp $display_config/rsyslog/*.conf $fs_root/etc/rsyslog.d/

    log_info "supervisor config"
    sudo cp $display_config/supervisord/supervisord.conf $fs_root/etc/supervisor/
    sudo cp $display_config/supervisord/supd-* $fs_root/etc/supervisor/conf.d/

    log_info "power button configs"
    # 2018-09-24 bfung: this needs to change as it assumes startx is run by root
    sudo cp $display_config/acpi/acpi_powerbtn.sh $fs_root/etc/acpi/powerbtn.sh

    #log_info "plymouth config"
    ## 15.10 and 16.04 put these in different directories
    #if [[ -d $fs_root/lib/plymouth/themes ]]; then
    #    plymouth_dir1=/lib/plymouth/themes
    #    plymouth_dir2=$fs_root/$plymouth_dir1
    #elif [[ -d $fs_root/usr/share/plymouth/themes ]]; then
    #    plymouth_dir1=/usr/share/plymouth/themes
    #    plymouth_dir2=$fs_root/$plymouth_dir1
    #else
    #    exit_error "plymouth not found"
    #fi
    #sudo cp -r $display_config/plymouth/* $plymouth_dir2
    #chr ln -fs $plymouth_dir1/eatsa-logo/eatsa-logo.plymouth /etc/alternatives/default.plymouth
    #chr ln -fs $plymouth_dir1/eatsa-logo/eatsa-logo.grub /etc/alternatives/default.plymouth.grub

    log_info "netbooting config"
    sudo cp $display_config/scripts/eatsa-initrd-hook $fs_root/usr/share/initramfs-tools/hooks/
    sudo cp $display_config/scripts/eatsa-initrd-netboot $fs_root/usr/share/initramfs-tools/scripts/netboot
    sudo cp $display_config/scripts/wise-*.sh $fs_root/usr/local/bin/

    log_info "nginx config"
    chr rm -f /var/www/html/index.html
    chr ln -fs /version.txt /var/www/html/version.txt

    log_info "$platform specific config"

    # watchdog
    chr $apt_get install watchdog

    # supervisor config and helper script
    sudo cp $display_config/supervisord/odroid-* $fs_root/etc/supervisor/conf.d/
    sudo cp $display_config/scripts/plc-port.sh $fs_root/usr/local/bin/

    # copy both full and netboot boot.ini files, we select them
    # at image time
    sudo cp $display_config/odroid/boot-*.ini $fs_root/boot/

    # enable more modules in initrd to support odroid ethernet
    sudo cp $display_config/odroid/modules $fs_root/etc/initramfs-tools/

    ## configuration for earlier display of splash screen
    #echo "FRAMEBUFFER=/dev/fb0" | cht /etc/initramfs-tools/conf.d/fb0
    #echo "FRAMEBUFFER=y" | cht /etc/initramfs-tools/conf.d/splash

    # rebuild the initrd as uinitrd, special format required by uboot
    # also pulls in out live-boot change from above
    chr update-initramfs -u
    kern=$(chr find /boot -name initrd.img-\* | cut -d- -f2-)
    chr mkimage -A arm -O linux -T ramdisk -C none -a 0 -e 0 -n initramfs \
        -d /boot/initrd.img-$kern /boot/uInitrd


##
## filesystem image creation steps
##

do_squash_fs() {
    local fs_root="$1" squash_fs="$2"

    [[ $(dirname $squash_fs) != . ]] && mkdir -p $(dirname $squash_fs)
    log_info "creating squashed filesystem $squash_fs"
    rm -f $squash_fs
    sudo mksquashfs $fs_root $squash_fs -b 4096 -e boot \
        -Xcompression-level 9
}

###
# Create an image file for the odroid(_xu4).
###
do_stage2_odroid() {
    local platform="$1" target="$2"
    local fs_root=$tmpdir/.build-$platform
    local device=/dev/loop0
    local fs_image_tmp=$target/${PACKAGE}-${platform}.img
    local fs_image_full=$TOPDIR/${PACKAGE}-${platform}-full.img
    local fs_image_netboot=$target/netboot/${PACKAGE}-${platform}-netboot.img
    local squashfs=$target/netboot/filesystem-$platform.squashfs

    log_info "imaging for platform $platform"

    mkdir -p $target/netboot

    log_info "configuring for full image build"

    # clea up any leftovers from aborted builds
    if sudo losetup $device >/dev/null 2>&1; then
        mountpoint -q /tmp/p1 && sudo umount /tmp/p1
        mountpoint -q /tmp/p2 && sudo umount /tmp/p2
        sudo losetup -d $device
    fi

    # create a 1.5GB sparse file and attach it to the loop0 device
    dd if=/dev/zero of=$fs_image_tmp bs=1M count=1536 conv=sparse
    sudo losetup $device $fs_image_tmp

    # populate the MBR and odroid boot areas in the disk image
    sudo dd if=$display_config/odroid/start2.img of=$device
    sync

    # create filesystems on the two partitions
    log_info "creating filesystems"
    sudo partprobe $device
    sudo mkfs.vfat -n BOOT ${device}p1
    sudo mkfs.ext4 -L ROOT ${device}p2

    # mount the new filesystems
    mkdir -p /tmp/p1
    mkdir -p /tmp/p2
    sudo mount -L BOOT /tmp/p1
    sudo mount -L ROOT /tmp/p2

    # copy the filesystem
    log_info "copying filesystems"
    sudo tar --directory $fs_root -c . | sudo tar --directory /tmp/p2 -x

    # copy the initrd, kernel to the FAT partition
    sudo cp -v /tmp/p2/boot/* /tmp/p1/
    sudo cp -v /tmp/p1/boot-full.ini /tmp/p1/boot.ini

    log_info "creating boot version.txt in boot partition"
    echo "${BOOT_VERSION[$platform]}" | sudo tee /tmp/p1/version.txt

    # clean up
    sudo umount /tmp/p1
    sudo umount /tmp/p2

    # clean up

    sudo losetup -d $device

    log_info "compressing full filesystem image"
    gzip --stdout --force --fast $fs_image_tmp > ${fs_image_full}.gz

    log_info "creating netboot filesystem image"
    sudo losetup $device $fs_image_tmp
    sudo mount -L BOOT /tmp/p1
    sudo cp -v /tmp/p1/boot-netboot.ini /tmp/p1/boot.ini
    # remove files we no longer need from the boot partition
    # this leaves uInitrd and zImage
    for n in System.map initrd.img config uInitrd vmlinuz; do
        sudo rm -v /tmp/p1/$n-*
    done

    sudo umount /tmp/p1

    log_info "deleting partition 2"
    sudo sfdisk -d $device | grep -v ${device}p2 | sudo sfdisk $device

    sudo losetup -d $device

    log_info "compressing netboot filesystem image"
    # the number 262144 (128MB + 2KB in 512byte blocks/sectors) comes from the disk's mbr
    # we only want to grab the first partition
    dd if=$fs_image_tmp bs=512 count=264191 | \
        gzip --verbose --stdout --force --fast > ${fs_image_netboot}.gz

    log_info "creating boot version file in netboot directory"
    echo "${BOOT_VERSION[$platform]}" | sudo tee ${fs_image_netboot}.version

    do_squash_fs $fs_root $squashfs

    rm $fs_image_tmp

    rmdir /tmp/p1
    rmdir /tmp/p2
}

do_stage3() {
    local target="$1"

    log_info "creating version.txt symlink"
    ln -fs ../version.txt $target/netboot/version.txt

    log_info "creating filesystem versions"
    for n in $target/netboot/*squashfs; do
        echo $PKG_VERSION > ${n}.version
    done

    log_info "creating checksums"
    for n in $target/netboot/*squashfs $target/netboot/*img.gz; do
        sum=$(md5sum $n | cut -d' ' -f1)
        echo $sum > ${n}.sum
    done
}

case $PLATFORM in
    nuc_5ix)
        [[ $STAGE == *1* ]] && do_stage1 nuc_5ix $target $NUC_5IX_FS_VERSION
        [[ $STAGE == *2* ]] && do_stage2_nuc nuc_5ix $target
        do_stage3 $target
        ;;
    odroid_xu4)
        [[ $STAGE == *1* ]] && do_stage1 odroid_xu4 $target $ODROID_XU4_FS_VERSION
        [[ $STAGE == *2* ]] && do_stage2_odroid odroid_xu4 $target
        do_stage3 $target
        ;;
    odroid_c2)
        [[ $STAGE == *1* ]] && echo "${PLATFORM}: stage 1 - target=$target, fs_version=$ODROID_C2_FS_VERSION"
        [[ $STAGE == *2* ]] && echo "${PLATFORM}: stage 2 - target=$target"
        echo "odroid_c2 hi!"
        ;;
    stage3)
        do_stage3 $target
        ;;
    '')
        do_stage1 nuc_5ix $target $NUC_5IX_FS_VERSION
        do_stage2_nuc nuc_5ix $target
        do_stage1 odroid_xu4 $target $ODROID_XU4_FS_VERSION
        do_stage2_odroid odroid_xu4 $target
        do_stage3 $target
        ;;
    *) exit_error "unknown platform $PLATFORM" ;;
esac
